// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 3, 7, 9, 18, 41, 53772801, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 3, 7, 9, 26, 56, 793751297, time.UTC),
			uncompressedSize: 792,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x06\x5f\x7c\x69\xe2\x56\xa2\x50\xa1\x38\x17\x0a\x42\x08\x04\x12\xcb\x81\x13\x9a\x8d\x87\x8d\x5b\xc7\xb6\xec\x49\x56\x0b\xe2\xdf\x91\xe3\xb6\x2c\x27\x72\x89\x9e\x46\xf3\xe6\xbd\x99\xe7\xfe\xd9\xed\xa7\xd7\xbb\x6f\x9f\xdf\xc0\xc4\xb3\x1b\x9a\xbe\xfc\xc0\xa1\x3f\x68\x41\x5e\x0c\x4d\xd3\x4f\x84\x66\x68\x00\x00\x7a\xb6\xec\x68\xb8\x0d\xe3\x32\x93\xe7\x5e\x55\x5c\x6b\x33\x31\xc2\x38\x61\xca\xc4\x5a\x7c\xdd\xbd\x6d\x6f\xc4\x79\xc9\xe3\x4c\x5a\xac\x96\x8e\x31\x24\x16\x30\x06\xcf\xe4\x59\x8b\xa3\x35\x3c\x69\x43\xab\x1d\xa9\xdd\xc0\x05\x58\x6f\xd9\xa2\x6b\xf3\x88\x8e\xf4\x55\x77\xf9\x48\xe5\xac\xbf\x87\x29\xd1\x0f\x2d\x26\xe6\x98\x5f\x29\xb5\xde\xe5\xee\x27\xf9\xd1\xf8\xce\x13\xab\x97\xdd\xf3\xee\x4a\xad\xd6\x50\x68\xef\x72\x37\xe6\x2c\x20\x91\xd3\x22\xf3\xc9\x51\x9e\x88\x58\x0c\x4d\xaf\xaa\xad\xa6\xdf\x07\x73\x7a\x20\xdf\x9a\xc0\x1a\x2d\xe7\x53\xbb\x01\x09\xa3\xc3\x9c\xb5\x7c\xe4\x93\x9b\xee\x14\x5c\x86\x98\xc8\x05\x34\x5a\xe2\xc2\x41\x42\xb5\x21\x6f\x2e\x2f\x25\x4c\x64\x0f\x13\x6b\xf9\xa2\x00\x83\x8c\x6d\x26\x5e\xa2\x96\xbf\x7e\xcb\x3a\x6b\x9b\x97\xc3\x92\x46\x82\x9c\x46\x2d\x54\x74\x78\x72\x36\xb3\x72\x76\x25\x01\x7c\x8a\xa4\x05\xc6\xe8\xec\x88\x6c\x83\x57\xab\x37\x5d\xc1\xd4\xcd\x91\x0e\x4b\x72\xe2\x8c\x2a\x3e\x09\xbd\xcb\xad\xdf\x94\xfe\xad\x96\x6f\x17\xa0\xec\x1e\x78\xb2\x19\xaa\xd1\xe8\x08\x33\x01\x79\xdc\x3b\x82\xf7\xb8\xe2\x97\x31\xd9\xc8\x17\x80\xde\x14\x9f\xd9\x1a\x4a\xb0\xc4\x43\x42\x63\xfd\x01\x38\x00\xc2\x91\xf6\xb0\x4f\xe1\x98\x29\x01\x4f\xc8\xff\x4c\xe9\xb1\x1e\x47\x3e\x1d\xa7\x4c\x2a\x67\x08\xb3\x2a\xd1\xba\xae\x7b\x6d\xf3\x12\x4b\x0c\x94\x04\xc6\x74\x20\xd6\xf2\xfb\xde\xa1\xbf\x97\xc3\x43\x25\xc3\xbb\xdd\xc7\x0f\xd7\x55\x6a\xaf\xf0\xcc\xab\x8a\x0f\xf7\xaa\xec\x43\x53\x51\xde\xc4\x6f\xdb\x94\xff\xcf\x46\x57\x36\xd4\xab\xda\x54\xf2\x50\x73\x50\x82\x51\x1e\xc2\x9f\x00\x00\x00\xff\xff\x53\xfe\xca\xf1\x18\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
